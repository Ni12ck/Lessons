# Цель: понять разницу между атрибутами объекта и класса, дополнив уже существующий класс. Применить метод __new__.

# Дополнительно о работе метода __new__:
# Как мы уже знаем метод __new__ вызывается перед тем, как вызовется метод __init__.
# Разберёмся, как происходит передача данных между ними на следующем примере:

# class Example:
#
#     def __new__(cls, *args, **kwargs):
#         print(args)
#         print(kwargs)
#         return object.__new__(cls)
#
#
#     def __init__(self, first, second, third):
#         print(first)
#         print(second)
#         print(third)
#
#
# ex = Example('data', second=25, third=3.14)

# Работа __new__:
# 1. 'data' передаётся (упаковывается) в *args, т.к. это позиционный аргумент. Он будет находиться под индексом 0 как
# единственный элемент кортежа.
# 2. second=25 и third=3.14 передаются (упаковываются) в **kwargs т.к. это именованные аргументы. Они будут находиться
# под ключами 'second' и 'third' со значением 25 и 3.14 соответственно в словаре.
# Передача данных из __new__ в __init__:
# После того как метод __new__ отработает до конца, произойдут следующие события с параметрами __init__:
# 1. В параметр first распакуется из args единственный аргумент 'data'.
# 2. В параметр second распакуется значение под ключом с тем же названием из словаря kwargs.
# 3. В параметр third распакуется значение под ключом с тем же названием из словаря kwargs.


# Задача "История строительства":
# Для решения этой задачи будем пользоваться решением к предыдущей задаче "Перегрузка операторов".

# В классе House создайте атрибут houses_history = [], который будет хранить названия созданных объектов.

# Правильней вписывать здание в историю сразу при создании объекта, тем более можно удобно обращаться к атрибутам класса
# используя ссылку на сам класс - cls.
# Дополните метод __new__ так, чтобы:
# 1. Название объекта добавлялось в список cls.houses_history.
# 2. Название строения можно взять из args по индексу.

# Также переопределите метод __del__(self) в котором будет выводиться строка:
# "<название> снесён, но он останется в истории"

# Создайте несколько объектов класса House и проверьте работу методов __del__ и __new__, а также значение атрибута
# houses_history.

# Создаю класс House
class House:
    # Создал атрибут houses_history = [], который будет хранить названия созданных объектов
    houses_history = []

    # Определил метод __new__
    def __new__(cls, *args):
        # Создание some_house
        some_house = super().__new__(cls)
        # Присваиваю переменной house_name название дома по индексу
        house_name = args[0]  # 0 - индекс имени (name: str)
        # Переменная house_name добавляется в список houses_history
        cls.houses_history.append(house_name)
        return some_house

    # Определил метод __init__, в который передаю название и кол-во этажей
    def __init__(self, name: str, number_of_floors: int):
        self.name = name
        self.number_of_floors = number_of_floors

    # Переопределил метод __del__(self) в котором будет выводиться строка:"<название> снесён, но он останется в истории"
    def __del__(self):
        print(f'{self.name} снесён, но он останется в истории')


# # Создал три объекта класса House и вывел истории после каждого создания объекта
h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)  # ['ЖК Эльбрус']
h2 = House('ЖК Акация', 20)
print(House.houses_history)  # ['ЖК Эльбрус', 'ЖК Акация']
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)  # ['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']

# Удаление объектов h2 и h3
del h2  # ЖК Акация снесён, но он останется в истории
del h3  # ЖК Матрёшки снесён, но он останется в истории

# Вывод истории
print(House.houses_history)  # ['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
