# try:
##### Код с возможной ошибкой
# except:
##### Код, срабатывающий в случае возникновения ошибки

try:
    #  print(10/i)
    #        ~~^~
    # ZeroDivisionError: division by zero
    i = 0
    print(10 / i)
    print('сделано')
# except ZeroDivisionError: # Лучше указывать название ошибки
    # print('На 0 делить нельзя')
except ZeroDivisionError as ZD:
    print(f'Нельзя делить на 0, ошибка: {ZD}')
except NameError:
    print('Неправильные названия переменных')

# Возможный вариант записи сразу для нескольких возможных ошибок: except (ZeroDivisionError, NameError):

# Блок else
# Блок else выполняется только в том случае, если в блоке try не возникло ошибок. Он не является обязательным, но может
# быть полезен, если необходимо выполнить конкретный код в случае успешного выполнения блока try. Таким образом, если
# ошибок не произошло, выполняется код в блоке else.

# Блок finally
# Блок finally выполняется всегда, независимо от того, сработал ли блок else или except. Это означает, что код в блоке
# finally будет выполнен в любом случае, даже если в блоке try возникла ошибка. Блок finally обычно используется для
# выполнения завершающих операций, таких как закрытие файлов или освобождение ресурсов, что гарантирует их выполнение
# независимо от результата выполнения основного кода.

print()
print('Работа с исключениями с использованием всех блоков:')
i = float(input('Введите число: '))
try:
    result = 100 / i
except ZeroDivisionError as exc:
    print(f'Нельзя делить на 0, ошибка: {exc}')
else:
    print('Не поделил на 0 ^_^')
finally:
    print('Конец программы')

