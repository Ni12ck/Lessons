# Задача "Изменять нельзя получать":
# В этой задаче мы реализуем классы транспорта, в которых нельзя будет просто так поменять цвет, мощность двигателя и
# прочие свойства, т.к. в реальной жизни это чаще всего делается не владельцем, а в специальных сервисах. Да, узнать
# значения этих свойств мы сможем, но вот изменить - нет.

# Вам необходимо создать 2 класса: Vehicle и Sedan, где Vehicle - это любой транспорт, а Sedan(седан) - наследник класса
# Vehicle.

# I
# Каждый объект Vehicle должен содержать следующие атрибуты объекта:
# 1. Атрибут owner(str) - владелец транспорта. (владелец может меняться)
# 2. Атрибут __model(str) - модель (марка) транспорта. (мы не можем менять название модели)
# 3. Атрибут __engine_power(int) - мощность двигателя. (мы не можем менять мощность двигателя самостоятельно)
# 4. Атрибут __color(str) - название цвета. (мы не можем менять цвет автомобиля своими руками)

# А так же атрибут класса:
# 1. Атрибут класса __COLOR_VARIANTS, в который записан список допустимых цветов для окрашивания. (Цвета написать свои)

# Каждый объект Vehicle должен содержать следующий методы:
# 1. Метод get_model - возвращает строку: "Модель: <название модели транспорта>"
# 2. Метод get_horsepower - возвращает строку: "Мощность двигателя: <мощность>"
# 3. Метод get_color - возвращает строку: "Цвет: <цвет транспорта>"
# 4. Метод print_info - распечатывает результаты методов (в том же порядке): get_model, get_horsepower, get_color; а так
# же владельца в конце в формате "Владелец: <имя>"
# 5. Метод set_color - принимает аргумент new_color(str), меняет цвет __color на new_color, если он есть в списке
# __COLOR_VARIANTS, в противном случае выводит на экран надпись: "Нельзя сменить цвет на <новый цвет>".

# Взаимосвязь методов и скрытых атрибутов:
# 1. Методы get_model, get_horsepower, get_color находятся в одном классе с соответствующими им атрибутами: __model,
# __engine_power, __color. Поэтому атрибуты будут доступны для методов.
# 2. Атрибут класса __COLOR_VARIANTS можно получить обращаясь к нему через объект(self).
# 3. Проверка в __COLOR_VARIANTS происходит не учитывая регистр ('BLACK' ~ 'black').

# II
# Класс Sedan наследуется от класса Vehicle, а так же содержит следующие атрибуты:
# 1. Атрибут __PASSENGERS_LIMIT = 5 (в седан может поместиться только 5 пассажиров)


# Пункты задачи:
# 1. Создайте классы Vehicle и Sedan.
# 2. Напишите соответствующие свойства в обоих классах.
# 3. Не забудьте сделать Sedan наследником класса Vehicle.
# 4. Создайте объект класса Sedan и проверьте, как работают все его методы, взяты из класса Vehicle.

# Примечания:
# 1. Обращайте особое внимание на условия задачи: что является атрибутом класса, а что атрибутом объекта.
# 2. Методы, где описано получение/перезапись каких-либо атрибутов рекомендуется начинать со слов get и set
# соответственно. Такие методы часто используются для доступа к скрытым атрибутам и позволяют написать дополнительную
# логику(код) при их получении/изменении.
# 3. Не забывайте использовать self при обращении к атрибутам объекта.
# 4. Константные(постоянные) значения в Python принято писать полностью в верхнем регистре (капсом), как в случае списка
# цветов или количеством пассажиров.


# Создал класс Vehicle
class Vehicle:
    # Атрибут класса __COLOR_VARIANTS, в который записан список допустимых цветов для окрашивания
    __COLOR_VARIANTS = ['black', 'white', 'violet', 'blue', 'yellow', 'pink']

    def __init__(self, owner: str, __model: str, __engine_power: int, __color: str):
        # Атрибуты объекта
        self.owner = owner  # владелец транспорта
        self.__model = __model  # модель (марка) транспорта
        self.__engine_power = __engine_power  # мощность двигателя
        self.__color = __color  # название цвета

    # Метод get_model - возвращает строку: "Модель: <название модели транспорта>"
    def get_model(self):
        return f'Модель: {self.__model}'

    # Метод get_horsepower - возвращает строку: "Мощность двигателя: <мощность>"
    def get_horsepower(self):
        return f'Мощность двигателя: {self.__engine_power}'

    # Метод get_color - возвращает строку: "Цвет: <цвет транспорта>"
    def get_color(self):
        return f'Цвет: {self.__color}'

    # Метод print_info - распечатывает результаты методов (в том же порядке): get_model, get_horsepower, get_color; а
    # так же владельца в конце в формате "Владелец: <имя>"
    def print_info(self):
        return print(f'{self.get_model()}, {self.get_horsepower()}, {self.get_color()}, Владелец: {self.owner}')

    # Метод set_color - принимает аргумент new_color(str), меняет цвет __color на new_color, если он есть в списке
    # __COLOR_VARIANTS, в противном случае выводит на экран надпись: "Нельзя сменить цвет на <новый цвет>".
    def set_color(self, new_color: str):
        # Проверка в __COLOR_VARIANTS происходит не учитывая регистр ('BLACK' ~ 'black')
        if new_color.lower() in [color_from_list.lower() for color_from_list in self.__COLOR_VARIANTS]:
            self.__color = new_color
        else:
            print(f'Нельзя сменить цвет на {new_color}')


# Создал класс Sedan
class Sedan(Vehicle):  # Наследование класса Vehicle (родительского) классом Sedan (дочерним)
    # Атрибут __PASSENGERS_LIMIT = 5 (в седан может поместиться только 5 пассажиров)
    __PASSENGERS_LIMIT = 5


# Проверка
# Текущие цвета __COLOR_VARIANTS = ['black', 'white', 'violet', 'blue', 'yellow', 'pink']
vehicle1 = Sedan('Vladimir', 'Porsche 911 GT3', 502, 'white')

# Изначальные свойства
print('Изначальные свойства:')
vehicle1.print_info()
print()

# Изменил цвет на тот, которого нет в списке
vehicle1.set_color('Green')
print('После попытки изменения цвета на "Green":')
vehicle1.print_info()
print()

# Изменил цвет на 'Black' и владельца на 'Ni12ck'
vehicle1.set_color('Black')
vehicle1.owner = 'Ni12ck'
print('После изменения цвета машины на "Black" и имени владельца на "Ni12ck"')
vehicle1.print_info()
