# Задача "Съедобное, несъедобное":
# Разнообразие животного мира давно будоражит умы человечества. Царства, классы, виды... Почему бы и нам не попробовать
# выстроить что-то подобное используя наследования классов?

# Необходимо описать пример иерархии животного мира, используя классы и принцип наследования.

# Создайте:
# 2 класса родителя: Animal, Plant
# Для класса Animal атрибуты alive = True(живой) и fed = False(накормленный), name - индивидуальное название каждого
# животного.
# Для класса Plant атрибут edible = False(съедобность), name - индивидуальное название каждого растения

# 4 класса наследника:
# Mammal, Predator для Animal.
# Flower, Fruit для Plant.

# У каждого из объектов класса Mammal и Predator должны быть атрибуты и методы:
# eat(self, food) - метод, где food - это параметр, принимающий объекты классов растений.
# В данном случае можно использовать принцип наследования, чтобы не дублировать код.

# Метод eat должен работать следующим образом:
# Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>", меняется атрибут fed на
# True.
# Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>", меняется
# атрибут alive на False.
# Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет.

# У каждого объекта Fruit должен быть атрибут edible = True (переопределить при наследовании)

# Создайте объекты классов и проделайте действия затронутые в примере результата работы программы.

# Пункты задачи:
# 1. Создайте классы Animal и Plant с соответствующими атрибутами и методами
# 2. Создайте(+унаследуйте) классы Mammal, Predator, Flower, Fruit с соответствующими атрибутами и методами. При
# необходимости переопределите значения атрибутов.
# 3. Создайте объекты этих классов.

# Создал класс Animal
class Animal:
    # Создал атрибуты класса
    alive = True  # Живой
    fed = False  # Накормленный

    def __init__(self, name):
        self.name = name  # name - индивидуальное название каждого животного

    # Создал метод eat(self, food), где food - это параметр, принимающий объекты классов растений
    def eat(self, food):
        # Если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет
        if food.edible:
            print(f'{self.name} съел {food.name}')
            self.fed = True
        else:
            print(f'{self.name} не стал есть {food.name}')
            self.alive = False


# Создал класс Mammal
class Mammal(Animal):  # Наследование класса Animal (родительского) классом Mammal (дочерним)
    pass


# Создал класс Predator
class Predator(Animal):  # Наследование класса Animal (родительского) классом Predator (дочерним)
    pass


# Создал класс Plant
class Plant:
    # Создал атрибуты класса
    edible = False  # Съедобность

    def __init__(self, name):
        self.name = name  # name - индивидуальное название каждого растения

    # метод вывод съедобности растения
    def __str__(self):
        return self.edible


# Создал класс Flower
class Flower(Plant):  # Наследование класса Plant (родительского) классом Flower (дочерним)
    pass


# Создал класс Flower
class Fruit(Plant):  # Наследование класса Plant (родительского) классом Fruit (дочерним)
    edible = True


# Выполняемый код(для проверки):
# Создание объектов классов
a1 = Predator('Волк с Уолл-Стрит')
a2 = Mammal('Хатико')
p1 = Flower('Цветик семицветик')
p2 = Fruit('Заводной апельсин')

print(f'Имя животного a1: {a1.name}')
print(f'Имя растения p1: {p1.name}')

print(f'Животное a1 живо? - {a1.alive}')
print(f'Животное a2 накормлено? - {a2.fed}')

print()

# Вызов метода eat для животных
a1.eat(p1)
a2.eat(p2)

print(f'Животное a1 живо? - {a1.alive}')
print(f'Животное a2 накормлено? - {a2.fed}')
