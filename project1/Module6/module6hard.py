# Задание "Они все так похожи":
# 2D? 3D? Даже 4D?.... Настолько глубоко мы заходить конечно же не будем, 4D подождёт, но вот с двумерными и трёхмерными
# фигурами можем поэкспериментировать.
# Вы когда-нибудь задумывались как устроены графические библиотеки для языков программирования?
# Безусловно, там выполняются огромные расчёты при помощи вашей видеокарты, но... Что лежит в основе удобного
# использования таких объектов?

# По названию задачи можно понять, что все геометрические фигуры обладают схожими свойствами, такими как: длины сторон,
# цвет и др.

# Давайте попробуем реализовать простейшие классы для некоторых таких фигур и при этом применить наследование (в
# будущем, изучая сторонние библиотеки, вы будете замечать схожие классы, уже написанные кем-то ранее)

# Общее ТЗ:
# Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать методами изменения
# размеров, цвета и т.д.
# Многие атрибуты и методы должны быть инкапсулированны и для них должны быть написаны интерфейсы взаимодействия
# (методы) - геттеры и сеттеры.


# Подробное ТЗ:

# I класс Figure

# Атрибуты класса Figure: sides_count = 0
# Каждый объект класса Figure должен обладать следующими атрибутами:
# 1. Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
# 2. Атрибуты(публичные): filled(закрашенный, bool)

# И методами:
# 1. Метод get_color, возвращает список RGB цветов.
# 2. Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность переданных значений
# перед установкой нового цвета. Корректным цвет: все значения r, g и b - целые числа в диапазоне от 0 до 255
# (включительно).
# 3. Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
# предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
# 4. Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если все стороны целые
# положительные числа и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.
# 5. Метод get_sides должен возвращать значение я атрибута __sides.
# 6. Метод __len__ должен возвращать периметр фигуры.
# 7. Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count, то не
# изменять, в противном случае - менять.


# II класс Circle
# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
# 1. Все атрибуты и методы класса Figure
# 2. Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
# 3. Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).


# III класс Triangle
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
# 1. Все атрибуты и методы класса Figure
# 2. Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)


# IV класс Cube
# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
# 1. Все атрибуты и методы класса Figure.
# 2. Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
# 3. Метод get_volume, возвращает объём куба.


# ВАЖНО!
# При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно sides_count, то создать
# массив с единичными сторонами и в том кол-ве, которое требует фигура.
# Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
# Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
# Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]


# Примечания (рекомендации):
# Рекомендуется сделать дополнительные (свои проверки) работы методов объектов каждого класса.
# Делайте каждый класс и метод последовательно и проверяйте работу каждой части отдельно.
# Для проверки принадлежности к типу рекомендуется использовать функцию isinstance.
# Помните, служебные инкапсулированные методы можно и нужно использовать только внутри текущего класса.
# Вам не запрещается вводить дополнительные атрибуты и методы, творите, но не переборщите!


# Импорт библиотеки math
import math


# Создал класс Figure
class Figure:
    # Атрибут класса
    sides_count = 0  # количество сторон

    # Атрибуты объекта:
    # 1. Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
    # 2. Атрибуты(публичные): filled(закрашенный, bool)
    def __init__(self, color, *sides):
        if len(sides) != self.sides_count:
            self.__sides = [1] * self.sides_count
        else:
            self.__sides = list(sides)  # список сторон (целые числа)
        self.__color = list(color)  # список цветов в формате RGB
        self.filled = False  # закрашенный, bool

    # Метод get_color, возвращает список RGB цветов.
    def get_color(self):
        return self.__color

    # Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность переданных
    # значений перед установкой нового цвета. Корректным цвет: все значения r, g и b - целые числа в диапазоне от 0 до
    # 255 (включительно).
    def __is_valid_color(self, r, g, b):
        return all(isinstance(i, int) and 0 <= i <= 255 for i in (r, g, b))

    # Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
    # предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b) is True:
            self.__color = [r, g, b]
        else:
            print(f'Введены неправильные значения r, g, b')

    # Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если все стороны целые
    # положительные числа и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.
    def __is_valid_sides(self, *some_sides):
        return all(isinstance(side, int) and side > 0 for side in some_sides) and len(some_sides) == self.sides_count

    # Метод get_sides должен возвращать значение(я) атрибута __sides.
    def get_sides(self):
        return self.__sides

    # Метод __len__ должен возвращать периметр фигуры.
    def __len__(self):
        return sum(self.__sides)

    # Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count, то не
    # изменять, в противном случае - менять.
    def set_sides(self, *some_sides):
        if self.__is_valid_sides(*some_sides):
            self.__sides = list(some_sides)
        else:
            print(f'Введены неправильные значения сторон')


# Создал класс Circle
class Circle(Figure):  # Наследование класса Figure (родительского) классом Circle (дочерним)
    # Атрибут класса
    sides_count = 1  # количество сторон

    # Каждый объект класса Circle должен обладать всеми атрибутами и методами класса Figure
    def __init__(self, color, *sides):
        super().__init__(color, *sides)
        # Атрибут __radius, рассчитанный исходя из длины окружности (одной единственной стороны)
        self.__radius = self.get_sides()[0] / (2 * math.pi)

    # Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).
    def get_square(self):
        # площадь круга
        return math.pi * self.__radius ** 2


# Создал класс Triangle
class Triangle(Figure):  # Наследование класса Figure (родительского) классом Triangle (дочерним)
    sides_count = 3

    # Каждый объект класса Triangle должен обладать всеми атрибутами и методами класса Figure
    def __init__(self, color, *sides):
        super().__init__(color, *sides)

    # Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
    def get_square(self):
        # стороны треугольника
        a, b, c = self.get_sides()
        # полупериметр треугольника
        sem_tr = 0.5 * (a + b + c)
        # площадь треугольника
        return math.sqrt(sem_tr * (sem_tr - a) * (sem_tr - b) * (sem_tr - c))


# Создал класс Cube
class Cube(Figure):  # Наследование класса Figure (родительского) классом Cube (дочерним)
    sides_count = 12

    # Каждый объект класса Cube должен обладать всеми атрибутами и методами класса Figure
    def __init__(self, color, *sides):
        if len(sides) != 1:
            super().__init__(color, *([1] * self.sides_count))
        else:
            super().__init__(color, *([sides[0]] * self.sides_count))

    # Метод get_volume, возвращает объём куба.
    def get_volume(self):
        # Сторона куба
        side_cube = self.get_sides()[0]
        return side_cube ** 3


# Код для проверки:
circle1 = Circle((200, 200, 100), 10)  # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)
# Проверка на изменение цветов:
circle1.set_color(55, 66, 77)  # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15)  # Не изменится
print(cube1.get_color())
# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5)  # Не изменится
print(cube1.get_sides())
circle1.set_sides(15)  # Изменится
print(circle1.get_sides())
# Проверка периметра (круга), это и есть длина:
print(len(circle1))
# Проверка объёма (куба):
print(cube1.get_volume())
