# Функция проверки условий победы
def check_winner():
    # Условия победы крестиков
    if area[0][0] == 'X' and area[0][1] == 'X' and area[0][2] == 'X':
        return 'X'
    if area[1][0] == 'X' and area[1][1] == 'X' and area[1][2] == 'X':
        return 'X'
    if area[2][0] == 'X'  and area[2][1] == 'X' and area[2][2] == 'X':
        return 'X'
    if area[0][0] == 'X' and area[1][0] == 'X' and area[2][0] == 'X':
        return 'X'
    if area[0][1] == 'X' and area[1][1] == 'X' and area[2][1] == 'X':
        return 'X'
    if area[0][2] == 'X' and area[1][2] == 'X' and area[2][2] == 'X':
        return 'X'
    if area[0][0] == 'X' and area[1][1] == 'X' and area[2][2] == 'X':
        return 'X'
    if area[0][2] == 'X' and area[1][1] == 'X' and area[2][0] == 'X':
        return 'X'
    # Условия победы ноликов
    if area[0][0] == '0' and area[0][1] == '0' and area[0][2] == '0':
        return '0'
    if area[1][0] == '0' and area[1][1] == '0' and area[1][2] == '0':
        return '0'
    if area[2][0] == '0' and area[2][1] == '0' and area[2][2] == '0':
        return '0'
    if area[0][0] == '0' and area[1][0] == '0' and area[2][0] == '0':
        return '0'
    if area[0][1] == '0' and area[1][1] == '0' and area[2][1] == '0':
        return '0'
    if area[0][2] == '0' and area[1][2] == '0' and area[2][2] == '0':
        return '0'
    if area[0][0] == '0' and area[1][1] == '0' and area[2][2] == '0':
        return '0'
    if area[0][2] == '0' and area[1][1] == '0' and area[2][0] == '0':
        return '0'
    # Если условия не выполнились, то функция выдаст * - ничью
    return '*'

# Создаю функцию отрисовки поля
def draw_area():
    # Вывожу игровое поле с помощью цикла for, перечисляя переменные
    for i in area:
        # Вывод поля с открытием списков
        print(*i)
    # Отделяющая строка
    print()

# Игровое поле будет состоять из вложенных списков
area = [['*','*', '*'], ['*','*', '*'], ['*','*', '*']]

# Приветствие
print('Добро пожаловать в крестики-нолики')
print('----------------------------------')

# Вызов функции отрисовки поля
draw_area()

# Создаю цикл на 9 ходов
for turn in range(1, 10):
    # Вывожу, номер хода
    print(f'Ход: {turn}')
    # Крестики ходят на нечётных ходах, а нолики на чётных
    # Если номер делится на 2 без остатка, то ходят "нолики"
    if turn % 2 == 0:
        # В список будет записываться O
        turn_char = '0'
        print('Ходят нолики')
    # Если номер делится на 2 с остатком, то ходят "крестики"
    else:
        # В список будет записываться X
        turn_char = 'X'
        print('Ходят крестики')
    # Создаю переменную ввода игроком номера строки, вычитаю единицу, чтобы был выбран нужный индекс
    row = int(input('Введите номер строки (1, 2, 3):')) - 1
    # Создаю переменную ввода игроком номера столбца
    column = int(input('Введите номер столбца (1, 2, 3):')) - 1
    # Условие проверки на занятость. Если в ячейке *, то записываем 0 или Х
    if area[row][column] == '*':
        # В зависимости от номера хода будут ходить крестики либо нолики
        area[row][column] = turn_char
    else:
        # Если ячейка занята, то ход пропускается
        print('Ячейка занята, вы пропускаете ход')
        print()
        # Вывод поля, потому что последующие строки цикла не сработает
        draw_area()
        continue
    print()
    # Отрисовка поля после хода
    draw_area()
    # Условия проверки победителя
    if check_winner() == 'X':
        print('Победили крестики!')
        # Прерываем при выполнении условия
        break
    if check_winner() == '0':
        print('Победили нолики!')
        # Прерываем при выполнении условия
        break
    if check_winner() == '*' and turn == 9:
        print('Ничья!')
        # Прерываем при выполнении условия
        break

