# Задание "Слишком древний шифр":

# Вы отправились в путешествие на необитаемый остров и конечно же в очередной вылазке в джунгли вы попали в ловушку
# местному племени (да-да, классика "Индиана Джонса").
# К вашему удивлению, в племени были неплохие математики и по совместительству фантазёры.
# Вы поняли это, когда после долгих блужданий перед вами появились ворота (выход из ловушки) с двумя каменными вставками
# для чисел.
# В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом, а второе было всегда пустым.

# К вашему счастью рядом с менее успешными и уже неговорящими путешественниками находился папирус, где были написаны
# правила для решения этого "ребуса".

# Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно
# (делилось без остатка) сумме их значений.

# Пример кратности(деления без остатка):
# 1 + 2 = 3 (сумма пары)
# 9 / 3 = 3 (ровно 3 без остатка)
# 9 кратно 3 (9 делится на 3 без остатка)

# Пример 1:
# 9 - число из первой вставки
# 1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары; число 9 кратно сумме каждой пары)

# Пример 2:
# 11 - число из первой вставки
# 11029384756 - нужный пароль (1 и 10, 2 и 9, 3 и 8, 4 и 7, 5 и 6 - пары; число 11 кратно сумме каждой пары)

# К сожалению, у вас не так много времени, чтобы подбирать пароль вручную, шипы сверху уже движутся на вас
# (обожаю клише), тем более числа в первой вставке будут попадаться случайно.

# Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) программа выдавала нужный
# пароль result, для одного введённого числа.

# Все пароли для чисел от 3 до 20 (для сверки):
# 3 - 12
# 4 - 13
# 5 - 1423
# 6 - 121524
# 7 - 162534
# 8 - 13172635
# 9 - 1218273645
# 10 - 141923283746
# 11 - 11029384756
# 12 - 12131511124210394857
# 13 - 112211310495867
# 14 - 1611325212343114105968
# 15 - 1214114232133124115106978
# 16 - 1317115262143531341251161079
# 17 - 11621531441351261171089
# 18 - 12151811724272163631545414513612711810
# 19 - 118217316415514613712811910
# 20 - 13141911923282183731746416515614713812911

# Добавляю choice из функции random
from random import choice

# Создам список key_number, из него буду брать случайное число для переменной first_number, которое показывает значение
# в первой "каменной вставке".
key_number = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
first_number = choice(key_number)
# Вывожу число в первой "каменной вставке".
print('Случайное число из первой вставки:',first_number )

# Создам Dividers - список делителей больше 2 для значения в первой "каменной вставке".
Dividers = []
# Переменная для нахождения делителей больше 2 для первого числа
divider = 3
# Создаю цикл для нахождения делителей больше 2 для первого числа
while divider <= first_number:
    if first_number % divider == 0:
        Dividers.append(divider)
    divider = divider + 1
print('Список делителей:', Dividers)

# Создам список пар чисел, сумма которых равна делителям числа из первой вставки
list_couples = []

# Создам цикл для заполнения списка пар неравных друг другу чисел, сумма которых равна делителям числа из первой вставки
for i in Dividers:
    for j in range(1,i):
        for k in range(j,i):
            if i == j + k and j != k:
                # Записываю нужные числа в список пар
                list_couples.append(j)
                list_couples.append(k)

# Составлю список second_number из списка list_couples. Список second_number будет составляться пароль - значение во
# второй "каменной вставке"
second_number = ''.join([str(i) for i in list_couples])
print('Список пар, из которых состоят делители:', list_couples)
print('Пароль:', second_number)
print(f'Результат: {first_number} - {second_number}')