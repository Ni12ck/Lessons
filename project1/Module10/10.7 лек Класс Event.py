# Класс Event позволяет нам синхронизировать потоки между собой.
# Представьте, что у вас есть объект, который хранит флаг «True» или «False». Именно этот флаг будет сигналом для
# действия, в нашем случае — для разных потоков.

from threading import Thread, Event
import time


# Теперь представим, что у нас есть две функции. Первая функция — это рабочий, который выполняет задачу. Однако, он
# может приступить к выполнению этой задачи, но завершить окончательно не может до тех пор, пока ему не поступит сигнал
# от другого потока

def first_worker():
    print('Первый рабочий приступил к своей задаче')
    # Будет ждать сигнала от события
    event.wait()
    print('Первый рабочий продолжил выполнять свою задачу')
    time.sleep(2)
    print('Первый рабочий закончил свою задачу')


def second_worker():
    print('Второй рабочий приступил к своей задаче')
    time.sleep(5)
    print('Второй рабочий закончил свою задачу')
    # События произошло
    event.set()


# Создаю объект класса Event
event = Event()
# Сброс состояния флага на False
event.clear()

thread1 = Thread(target=first_worker)
thread2 = Thread(target=second_worker)

thread1.start()
thread2.start()

# Ожидание ивента с помощью wait(время ожидания)
# print(f'Ожидание ивента 2 секунды: {event.wait(timeout=2)}')

# Проверить состояние флага можно с помощью is_set()
# print(f'Поменял флаг: {event.set()}')

# False - никакого события не произошло, True - событие произошло
# print(f'Состояние флага: {event.is_set()}')
