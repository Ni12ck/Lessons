# Потоки существуют внутри одного процесса и работают с общими ресурсами этого процесса. Однако у процессов, по сути,
# своя область памяти и свой внутренний GIL (Global Interpreter Lock). То есть, когда мы говорим о потоках, мы говорим
# о конкурентном выполнении кода. Когда мы говорим о процессах, мы говорим о параллельном выполнении на разных ядрах
# вашего процессора. Однако из-за этого программа становится тяжелее для компьютера. И так как у каждого процесса своя
# область памяти, соответственно, сложнее становится их координировать между собой.

# Для работы с процессами потребуется multiprocessing
import multiprocessing
import time
import threading

# Счётчик, который будет увеличивать рабочий
counter = 0


def first_worker(n):  # n - значение, на которое надо увеличить счётчик
    global counter
    for i in range(n):
        counter += 1
        time.sleep(1)
        print(f'Счётчик I рабочего {counter}')
    print(f'Первый рабочий изменил значение counter - {counter}')


def second_worker(n):  # n - значение, на которое надо увеличить счётчик
    global counter
    for i in range(n):
        counter += 1
        time.sleep(1)
        print(f'Счётчик II рабочего {counter}')
    print(f'Второй рабочий изменил значение counter - {counter}')


# thread1 = threading.Thread(target=first_worker, args=(5,))
# thread2 = threading.Thread(target=second_worker, args=(3,))
# thread1.start()
# thread2.start()
# Второй рабочий изменил значение counter - 7
# Первый рабочий изменил значение counter - 8

if __name__ == '__main__':
    process1 = multiprocessing.Process(target=first_worker, args=(5,))
    process2 = multiprocessing.Process(target=second_worker, args=(3,))
    process1.start()
    process2.start()

# Таким образом, задачи, которые требуют определённых мощностей вашего процессора и предназначены для вычислений, лучше
# выполнять для достижения большей скорости выполнения с помощью процессов.
# Однако некоторые задачи, например, по вводу-выводу, получению информации (например, отправка запросов к сети и
# ожидание ответа), тоже иногда необходимо реализовывать с помощью процессов, а не потоков. Всё зависит от ситуации.
# Главное не забывать, что при наличии процессов в нашей программе сильно увеличиваются её требования к компьютеру, то
# есть программа становится тяжелее