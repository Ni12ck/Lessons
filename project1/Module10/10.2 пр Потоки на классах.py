# Задача "За честь и отвагу!":
# Создайте класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
# 1. Атрибут name - имя рыцаря. (str)
# 2. Атрибут power - сила рыцаря. (int)

# А также метод run, в котором рыцарь будет сражаться с врагами:
# 1. При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!".
# 2. Рыцарь сражается до тех пор, пока не повергнет всех врагов (у всех потоков их 100).
# 3. В процессе сражения количество врагов уменьшается на power текущего рыцаря.
# 4. По прошествию 1 дня сражения (1 секунды) выводится строка
# "<Имя рыцаря> сражается <кол-во дней>..., осталось <кол-во воинов> воинов."
# 5. После победы над всеми врагами выводится надпись "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"
# Как можно заметить нужно сделать задержку в 1 секунду, инструменты для задержки выберите сами.

# Пункты задачи:
# 1. Создайте класс Knight с соответствующими описанию свойствами.
# 2. Создайте и запустите 2 потока на основе класса Knight.
# 3. Выведите на экран строку об окончании битв.

# Импортировал threading
import threading
# Импортировал time
import time


# Создал класс Knight, наследованный от Thread
class Knight(threading.Thread):
    # Атрибуты объекта класса
    def __init__(self, name: str, power: int):
        # Прямой вызов конструктора родительского класса
        threading.Thread.__init__(self)
        self.name = name  # имя рыцаря
        self.power = power  # сила рыцаря
        self.counter = 100  # количество врагов
        self.day = 0  # количество дней

    # Создал метод run, в котором рыцарь будет сражаться с врагами
    def run(self):
        # При запуске потока выводится надпись
        print(f'{self.name} , на нас напали!')
        while self.counter != 0:
            # В процессе сражения количество врагов уменьшается на power текущего рыцаря
            self.counter -= self.power
            # увеличивается счётчик дней
            self.day += 1
            # Задержка
            time.sleep(1)
            # По прошествию 1 дня сражения (1 секунды) выводится строка
            print(f'{self.name} сражается {self.day} день(дня)..., осталось {self.counter} воинов')

        # После победы над всеми врагами выводится надпись
        print(f'{self.name} одержал победу спустя {self.day} дней(дня)!')


# Создание потоков
first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)

# Запуск потоков
first_knight.start()
second_knight.start()

# Приостановил основной поток
first_knight.join()
second_knight.join()

# Вывод строки после окончания потоков
print('Все битвы закончились!')
