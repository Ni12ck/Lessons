# Задача "Потоки гостей в кафе":
# Необходимо имитировать ситуацию с посещением гостями кафе.
# Создайте 3 класса: Table, Guest и Cafe.

# I
# Класс Table:
# 1. Объекты этого класса должны создаваться следующим способом - Table(1)
# 2. Обладать атрибутами number - номер стола и guest - гость, который сидит за этим столом (по умолчанию None)

# II
# Класс Guest:
# 1. Должен наследоваться от класса Thread (быть потоком).
# 2. Объекты этого класса должны создаваться следующим способом - Guest('Vasya').
# 3. Обладать атрибутом name - имя гостя.
# 4. Обладать методом run, где происходит ожидание случайным образом от 3 до 10 секунд.

# III
# Класс Cafe:
# 1. Объекты этого класса должны создаваться следующим способом - Cafe(Table(1), Table(2),....)
# 2. Обладать атрибутами queue - очередь (объект класса Queue) и tables - столы в этом кафе (любая коллекция).
# 3. Обладать методами guest_arrival (прибытие гостей) и discuss_guests (обслужить гостей).

# Метод guest_arrival(self, *guests):
# 1. Должен принимать неограниченное кол-во гостей (объектов класса Guest).
# 2. Далее, если есть свободный стол, то сажать гостя за стол (назначать столу guest), запускать поток гостя и выводить
# на экран строку "<имя гостя> сел(-а) за стол номер <номер стола>".
# 3. Если же свободных столов для посадки не осталось, то помещать гостя в очередь queue и выводить сообщение
# "<имя гостя> в очереди".

# Метод discuss_guests(self):
# Этот метод имитирует процесс обслуживания гостей.
# 1. Обслуживание должно происходить пока очередь не пустая (метод empty) или хотя бы один стол занят.
# 2. Если за столом есть гость(поток) и гость(поток) закончил приём пищи(поток завершил работу - метод is_alive), то
# вывести строки "<имя гостя за текущим столом> покушал(-а) и ушёл(ушла)" и "Стол номер <номер стола> свободен". Так же
# текущий стол освобождается (table.guest = None).
# 3. Если очередь ещё не пуста (метод empty) и стол один из столов освободился (None), то текущему столу присваивается
# гость взятый из очереди (queue.get()). Далее выводится строка "<имя гостя из очереди> вышел(-ла) из очереди и сел(-а)
# за стол номер <номер стола>"
# 4. Далее запустить поток этого гостя (start)

# Таким образом мы получаем 3 класса на основе которых имитируется работа кафе:
# 1. Table - стол, хранит информацию о находящемся за ним гостем (Guest).
# 2. Guest - гость, поток, при запуске которого происходит задержка от 3 до 10 секунд.
# 3. Cafe - кафе, в котором есть определённое кол-во столов и происходит имитация прибытия гостей (guest_arrival) и их
# обслуживания (discuss_guests).

# Импортировал threading
import threading
# Импортировал time
import time
# Импортировал Queue
from queue import Queue
# Импортировал randint
from random import randint


# Создал класс Table
class Table:
    # Атрибуты объекта класса
    def __init__(self, number: int):
        self.number = number  # номер стола
        self.guest = None  # гость, который сидит за этим столом


# Создал класс Guest
class Guest(threading.Thread):
    # Атрибуты объекта класса
    def __init__(self, name):
        super().__init__(name)
        self.name = name  # имя гостя

    # Метод run, где происходит ожидание случайным образом от 3 до 10 секунд
    def run(self):
        time.sleep(randint(3, 10))


# Создал класс Cafe
class Cafe:
    # Атрибуты объекта класса
    def __init__(self, *table):
        self.queue = Queue()  # очередь (объект класса Queue)
        self.tables = list(table)  # столы в этом кафе

    # Создал метод guest_arrival (прибытие гостей)
    def guest_arrival(self, *guests):
        # 1. Должен принимать неограниченное кол-во гостей (объектов класса Guest).
        # 2. Далее, если есть свободный стол, то сажать гостя за стол (назначать столу guest), запускать поток гостя и выводить
        # на экран строку "<имя гостя> сел(-а) за стол номер <номер стола>".
        # 3. Если же свободных столов для посадки не осталось, то помещать гостя в очередь queue и выводить сообщение
        # "<имя гостя> в очереди".


    # Создал метод discuss_guests (обслужить гостей)
    def discuss_guests(self):
        # 1. Обслуживание должно происходить пока очередь не пустая (метод empty) или хотя бы один стол занят.
        # 2. Если за столом есть гость(поток) и гость(поток) закончил приём пищи(поток завершил работу - метод is_alive), то
        # вывести строки "<имя гостя за текущим столом> покушал(-а) и ушёл(ушла)" и "Стол номер <номер стола> свободен". Так же
        # текущий стол освобождается (table.guest = None).
        # 3. Если очередь ещё не пуста (метод empty) и стол один из столов освободился (None), то текущему столу присваивается
        # гость взятый из очереди (queue.get()). Далее выводится строка "<имя гостя из очереди> вышел(-ла) из очереди и сел(-а)
        # за стол номер <номер стола>"
        # 4. Далее запустить поток этого гостя (start)
        pass
