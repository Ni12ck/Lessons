# Выполнение:
# Создайте функцию read_info(name), где name - название файла. Функция должна:
# 1. Создавать локальный список all_data.
# 2. Открывать файл name для чтения.
# 3. Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
# 4. Во время считывания добавлять каждую строку в список all_data.

# Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
# 1. Создайте список названий файлов в соответствии с названиями файлов архива.
# 2. Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в
# консоль.
# 3. Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект
# Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов. Измерьте
# время выполнения и выведите его в консоль.

# Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно
# закомментировав другой.

# Импорт time
import time

# Импорт multiprocessing
import multiprocessing


# Создал функцию read_info(name)
def read_info(name):
    # Создал локальный список all_data
    all_data = []
    # Открываю файл name для чтения
    with open(name, 'r', encoding='utf-8') as file:
        # Пока строки читаются
        while file.readline():
            # Считывать информацию построчно (readline), пока считанная строка не окажется пустой
            line = file.readline()
            # Во время считывания добавлять каждую строку в список all_data
            all_data.append(line)
    # Длина списка
    print(f'Длина списка all_data: {len(all_data)}')


# Первый вариант

def var_1(filenames):
    print('Первый вариант:')
    # Начало отсчёта
    start_time1 = time.time()

    # Чтение файлов
    for file_name in filenames:
        read_info(file_name)

    # Конец отсчёта
    end_time1 = time.time()
    # Общее время
    print(f'Время выполнения: {end_time1 - start_time1}\n')  # Время выполнения: 2.276682138442993


# Второй вариант

if __name__ == '__main__':
    # Папка с файлами
    root_dir = 'files'

    # Создал список названий файлов в соответствии с названиями файлов архива
    filenames = [f'{root_dir}/file {number}.txt' for number in range(1, 5)]

    # Запуск первого варианта
    var_1(filenames)

    print("Многопроцессорный вариант:")
    # Начало отсчёта
    start_time = time.time()
    # Создал список процессов
    array_process = []
    # Запуск процессов (блок start)
    for file_name in filenames:
        process = multiprocessing.Process(target=read_info, args=(file_name,))
        process.start()
        # Добавил процессы в список процессов, чтобы ожидать завершения всех процессов параллельно
        array_process.append(process)
    # Блок join
    for process in array_process:
        # Добавил join, чтобы посчитать время всех процессов в основном потоке
        process.join()

    # Конец отсчёта
    end_time = time.time()
    # Общее время
    print(f'Время выполнения: {end_time - start_time}')  # Время выполнения: 0.9348869323730469
