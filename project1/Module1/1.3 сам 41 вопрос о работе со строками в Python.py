# Источник: https://habr.com/ru/companies/ruvds/articles/500296/

# ////////////////////////////////////////////
#1. Как проверить два объекта на идентичность?
print('1. Как проверить два объекта на идентичность?')
# Оператор is возвращает True в том случае, если в две переменные записана ссылка на одну и ту же область памяти.
# Именно об этом идёт речь при разговоре об «идентичности объектов».
# Не стоит путать is и ==. Оператор == проверяет лишь равенство объектов.
# Переменная animals
animals = ['зебра','бобер', 'жираф', 'заяц']
# Приравниваем more_animals к animals
more_animals = animals
# Сравниваем more_animals и animals
print('more_animals и animals равны? : ', animals == more_animals) #=> True
# more_animals это animals?
print('more_animals это animals? : ', animals is more_animals) #=> True
# Переменная even_more_animals
even_more_animals = ['зебра','бобер', 'жираф', 'заяц']
# Сравниваем animals и even_more_animals
print('animals и even_more_animals равны? : ', animals == even_more_animals) #=> True
# animals это even_more_animals?
print('animals это even_more_animals? : ', animals is even_more_animals) #=> False
# Обратите внимание на то, что animals и even_more_animals не идентичны, хотя и равны друг другу.
# Кроме того, существует функция id(), которая возвращает идентификатор адреса памяти, связанного с именем переменной.
# При вызове этой функции для двух идентичных объектов будет выдан один и тот же идентификатор.
# Хочу вывести все id
print('id animals: ', id(animals))
print('id more_animals:', id(more_animals))
print('id even_more_animals:', id(even_more_animals))
# Хочу сравнить id
print('id more_animals и animals равны? : ',id(animals)==id(more_animals))
print('id animals и even_more_animals равны? : ',id(animals)==id(even_more_animals))
print('id more_animals и even_more_animals равны? : ',id(more_animals)==id(even_more_animals))
# id animals и id more_animals это разные id, хоть и числовое значение одно и то же
print('id more_animals это id animals? : ',id(animals) is id(more_animals))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 2. Как проверить то, что каждое слово в строке начинается с заглавной буквы?
# Существует строковый метод istitle(), который проверяет, начинается ли каждое слово в строке с заглавной буквы.
print('2. Как проверить то, что каждое слово в строке начинается с заглавной буквы?')
print('Каждое слово в строке с заглавной буквы в "The Hilton"?', 'The Hilton'.istitle())
print('Каждое слово в строке с заглавной буквы в "The dog"?','The dog'.istitle() )
print('Каждое слово в строке с заглавной буквы в "sticky rice"?','sticky rice'.istitle())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 3. Как проверить строку на вхождение в неё другой строки?
# Существует оператор in, который вернёт True в том случае, если строка содержит искомую подстроку.
print('3. Как проверить строку на вхождение в неё другой строки?')
print('Слово "plane" есть в The worlds fastest plane"?', 'plane' in 'The worlds fastest plane')
print('Слово "car" есть в "The worlds fastest plane"?', 'car' in 'The worlds fastest plane')
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 4. Как найти индекс первого вхождения подстроки в строку?
# Есть два метода, возвращающих индекс первого вхождения подстроки в строку. Это — find() и index().
# У каждого из них есть определённые особенности.
# Метод find() возвращает -1 в том случае, если искомая подстрока в строке не найдена.
print('4. Как найти индекс первого вхождения подстроки в строку?')
plane = 'The worlds fastest plane'
print('Индекс первого вхождения подстроки "plane" в строку "The worlds fastest plane":', 'The worlds fastest plane'.find('plane'))
print('Индекс первого вхождения подстроки "car" в строку "The worlds fastest plane":','The worlds fastest plane'.find('car'))
print('19-ый индекс:' + plane[19])
# Метод index() в подобной ситуации выбрасывает ошибку
# print('Индекс первого вхождения подстроки "car" в строку "The worlds fastest plane":','The worlds fastest plane'.index('car'))
# Traceback (most recent call last):
#   File "D:\projects_for_university\Lessons\project1\Модуль 1\1.3 сам 41 вопрос о работе со строками в Python.py", line 63, in <module>
#     print('Индекс первого вхождения подстроки "car" в строку "The worlds fastest plane":','The worlds fastest plane'.index('car'))
#                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
# ValueError: substring not found
print('Индекс первого вхождения подстроки "plane" в строку "The worlds fastest plane":', 'The worlds fastest plane'.index('plane'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 5. Как подсчитать количество символов в строке?
# Функция len() возвращает длину строки.
print('5. Как подсчитать количество символов в строке?')
print('Длина строки:',len('The first president of the organization..'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 6. Как подсчитать то, сколько раз определённый символ встречается в строке?
# Ответить на этот вопрос нам поможет метод count(), который возвращает количество вхождений в строку заданного символа.
print('6. Как подсчитать то, сколько раз определённый символ встречается в строке?')
print('Количество букв "о" в фразе "The first president of the organization..":','The first president of the organization..'.count('o'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 7. Как сделать первый символ строки заглавной буквой?
# Для того чтобы это сделать, можно воспользоваться методом capitalize().
print('7. Как сделать первый символ строки заглавной буквой?')
print('Первый символ строки "florida dolphins" с заглавной буквой:', 'florida dolphins'.capitalize())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 8. Что такое f-строки и как ими пользоваться?
# В Python 3.6 появилась новая возможность — так называемые «f-строки». Их применение чрезвычайно упрощает интерполяцию строк.
# Использование f-строк напоминает применение метода format().
# При объявлении f-строк перед открывающей кавычкой пишется буква f.
print('8. Что такое f-строки и как ими пользоваться?')
name = 'Chris'
food = 'creme brulee'
print('Имя:', name)
print('Еда:', food)
print('Должна получиться фраза "Hello. My name is Chris and I like creme brulee":', f'Hello. My name is {name} and I like {food}.')
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 9. Как найти подстроку в заданной части строки?
# Метод index() можно вызывать, передавая ему необязательные аргументы, представляющие индекс начального и
# конечного фрагмента строки, в пределах которых и нужно осуществлять поиск подстроки.
print('9. Как найти подстроку в заданной части строки?')
print('Строка: the happiest person in the whole wide world.')
print('Индекс слова "the", область поиска с 11 символа по 45:','the happiest person in the whole wide world.'.index('the',10,44))
# Обратите внимание на то, что вышеприведённая конструкция возвращает 23, а не 0, как было бы, не ограничь мы поиск.
print('Индекс слова "the", область поиска вся строка:','the happiest person in the whole wide world.'.index('the'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 10. Как вставить содержимое переменной в строку, воспользовавшись методом format()?
# Метод format() позволяет добиваться результатов, сходных с теми, которые можно получить, применяя f-строки.
# Правда, я полагаю, что использовать format() не так удобно,
# так как все переменные приходится указывать в качестве аргументов format().
print('10. Как вставить содержимое переменной в строку, воспользовавшись методом format()?')
difficulty = 'easy'
thing = 'exam'
print('Должна получиться фраза "That exam was easy!":', 'That {} was {}!'.format(thing, difficulty))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 11. Как узнать о том, что в строке содержатся только цифры?
# Существует метод isnumeric(), который возвращает True в том случае, если все символы, входящие в строку, являются цифрами.
print('11. Как узнать о том, что в строке содержатся только цифры?')
print('Все символы цифры в последовательности "80000"? -', '80000'.isnumeric())
print('Все символы цифры в последовательности "1.0"? -', '1.0'.isnumeric())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 12. Как разделить строку по заданному символу?
# Здесь нам поможет метод split(), который разбивает строку по заданному символу или по нескольким символам.
print('12. Как разделить строку по заданному символу?')
str1 = 'This is great'
print('Разделение строки "This is great" по заданному символу " ":','This is great'.split(' '))
print('Разделение строки по заданному символу " " переменной str1:', str1.split(' '))
str2 = 'not--so--great'
print('Разделение строки "not--so--great" по заданному символу "--":', 'not--so--great'.split('--'))
print('Разделение строки по заданному символу "--" переменной str2:', str2.split('--'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 13. Как проверить строку на то, что она составлена только из строчных букв?
# Метод islower() возвращает True только в том случае, если строка составлена исключительно из строчных букв.
print('13. Как проверить строку на то, что она составлена только из строчных букв?')
print('Строка "all lower case" составлена только из строчных букв? -', 'all lower case'.islower())
print('Строка "not aLL lowercase" составлена только из строчных букв? -', 'not aLL lowercase'.islower())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 14. Как проверить то, что строка начинается со строчной буквы?
# Сделать это можно, вызвав вышеописанный метод islower() для первого символа строки.
print('14. Как проверить то, что строка начинается со строчной буквы?')
print('Первый символ (с индексом 0) строчный символ? Строка "aPPLE" начинается со строчной буквы? -', 'aPPLE'[0].islower())
print('Первый символ (с индексом 0) строчный символ? Строка "1aPPLE" начинается со строчной буквы? -', '1aPPLE'[0].islower())
print('Первый символ (с индексом 0) строчный символ? Строка "A1aPPLE" начинается со строчной буквы? -', 'A1aPPLE'[0].islower())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 15. Можно ли в Python прибавить целое число к строке?
# В некоторых языках это возможно, но Python при попытке выполнения подобной операции будет выдана ошибка TypeError.
print('15. Можно ли в Python прибавить целое число к строке?')
print('Должна получиться строка "Tenf10":', 'Ten' + 'f10')
# print('Должна быть выдана ошибка', 'Ten' + 10)
# Traceback (most recent call last):
#   File "D:\projects_for_university\Lessons\project1\Модуль 1\1.3 сам 41 вопрос о работе со строками в Python.py", line 172, in <module>
#     print('Должна получиться строка "Ten10"', 'Ten' + 10)
#                                               ~~~~~~^~~~
# TypeError: can only concatenate str (not "int") to str
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 16. Как «перевернуть» строку?
# Для того чтобы «перевернуть» строку, её можно разбить, представив в виде списка символов,
# «перевернуть» список, и, объединив его элементы, сформировать новую строку.
print('16. Как «перевернуть» строку?')
print('Должна получиться строка "dlrow olleh:"',''.join(reversed("hello world")))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 17. Как объединить список строк в одну строку, элементы которой разделены дефисами?
# Метод join() умеет объединять элементы списков в строки, разделяя отдельные строки с использованием заданного символа.
print('17. Как объединить список строк в одну строку, элементы которой разделены дефисами?')
print('Должна получиться строка "a-b-c":', '-'.join(['a','b','c']))
print('Должна получиться строка "a*b*c" из элементов a,b,c, соединённых символом "*":', '*'.join(['a','b','c']))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 18. Как узнать о том, что все символы строки входят в ASCII?
# Метод isascii() возвращает True в том случае, если все символы, имеющиеся в строке, входят в ASCII.
print('18. Как узнать о том, что все символы строки входят в ASCII?')
print( 'Символы строки "Â" входят в ASCII? -', 'Â'.isascii())
print( 'Символы строки "A" входят в ASCII? -','A'.isascii())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 19. Как привести всю строку к верхнему или нижнему регистру?
# Для решения этих задач можно воспользоваться методами upper() и lower(),
# которые, соответственно, приводят все символы строк к верхнему и нижнему регистрам.
print('19. Как привести всю строку к верхнему или нижнему регистру?')
sentence = 'The Cat in the Hat'
print('Все символы в строке "The Cat in the Hat" должны быть приведены к верхнему регистру:', sentence.upper())
print('Все символы в строке "The Cat in the Hat" должны быть приведены к нижнему регистру:', sentence.lower())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 20. Как преобразовать первый и последний символы строки к верхнему регистру?
# Тут, как и в одном из предыдущих примеров, мы будем обращаться к символам строки по индексам.
# Строки в Python иммутабельны, поэтому мы будем заниматься сборкой новой строки на основе существующей.
print('20. Как преобразовать первый и последний символы строки к верхнему регистру?')
animal = 'fish'
print('Из слова "fish", должно получиться "FisH"', animal[0].upper() + animal[1:-1] + animal[-1].upper())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 21. Как проверить строку на то, что она составлена только из прописных букв?
# Имеется метод isupper(), который похож на уже рассмотренный islower().
# Но isupper() возвращает True только в том случае, если вся строка состоит из прописных букв.
print('21. Как проверить строку на то, что она составлена только из прописных букв?')
print('Все символы в строке "Toronto" в верхнем регистре? -', 'Toronto'.isupper())
print('Все символы в строке "TORONTO" в верхнем регистре? -', 'TORONTO'.isupper())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 22. В какой ситуации вы воспользовались бы методом splitlines()?
# Метод splitlines() разделяет строки по символам разрыва строки.
print('22. В какой ситуации вы воспользовались бы методом splitlines()?')
# Символ разрыва строки - "\n"
sentence = 'It was a stormy night\nThe house creeked\nThe wind blew.'
print('Строка \n"It was a stormy night\nThe house creeked\nThe wind blew."\nдолжна быть разделена на элементы после каждого символа разрыва строки:\n', sentence.splitlines())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 23. Как получить срез строки?
# Для получения среза строки используется синтаксическая конструкция следующего вида:
# string[start_index:end_index:step]
# Здесь step — это шаг, с которым будут возвращаться символы строки из диапазона start_index:end_index.
# Значение step, равное 3, указывает на то, что возвращён будет каждый третий символ.
print('23. Как получить срез строки?')
string1 = 'I like to eat apples'
print('Вывод символов в строке с первого по седьмой не включительно, должно получиться "I like":', string1[:6])
print('Вывод символов в строке с восьмого по четырнадцатый не включительно, должно получиться "to eat":', string1[7:13])
print('Вывод символов в строке с первого по последний не включительно, должно получиться "Ilk oetape":', string1[0:-1:2])
print('Количество символов в строке:', len(string1))
print('Вывод символов в строке с первого по последний включительно, должно получиться "Ilk oetape":', string1[0::2])
print('Вывод символов в строке с первого по последний не включительно, должно получиться "Ilk oetape":', string1[:-1:2])
print('Вывод символов в строке с первого по последний включительно, должно получиться "Ilk oetape":', string1[::2])
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 24. Как преобразовать целое число в строку?
# Для преобразования числа в строку можно воспользоваться конструктором str().
print('24. Как преобразовать целое число в строку?')
srting2 = str(3765543)
print('Тип числа "3765543" должна была поменяться на строку:',type(srting2))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 25. Как узнать о том, что строка содержит только алфавитные символы?
# Метод isalpha() возвращает True в том случае, если все символы в строке являются буквами.
print('25. Как узнать о том, что строка содержит только алфавитные символы?')
print('Строка "fdashbalk" состоит только из алфавитных символов? -', 'fdashbalk'.isalpha())
print('Строка "fdas1234hbalk" состоит только из алфавитных символов? -', 'fdas1243hbalk'.isalpha())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 26. Как в заданной строке заменить на что-либо все вхождения некоей подстроки?
# Если обойтись без экспорта модуля, позволяющего работать с регулярными выражениями,
# то для решения этой задачи можно воспользоваться методом replace().
print('26. Как в заданной строке заменить на что-либо все вхождения некоей подстроки?')
sentence = 'Sally sells sea shells by the sea shore'
print('В строка "Sally sells sea shells by the sea shore" слово "sea" должно поменяться на "mountain":', sentence.replace('sea', 'mountain'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 27. Как вернуть символ строки с минимальным ASCII-кодом?
# Если взглянуть на ASCII-коды элементов, то окажется, например, что прописные буквы имеют меньшие коды, чем строчные.
# Функция min() возвращает символ строки, имеющий наименьший код.
print('27. Как вернуть символ строки с минимальным ASCII-кодом?')
print('Символ строки "strings1234мыфцв23тю" с минимальным ASCII-кодом:' ,min('strings1234мыфцв23тю'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 28. Как проверить строку на то, что в ней содержатся только алфавитно-цифровые символы?
# В состав алфавитно-цифровых символов входят буквы и цифры.
# Для ответа на этот вопрос можно воспользоваться методом isalnum().
print('28. Как проверить строку на то, что в ней содержатся только алфавитно-цифровые символы?')
print('В строке "Ten10" только алфавитно-цифровые символы? -','Ten10'.isalnum())
print('В строке "Ten,10" только алфавитно-цифровые символы? -','Ten,10'.isalnum())
# Пробел не является алфавитно-цифровые символом
print('В строке "Ten 10" только алфавитно-цифровые символы? -','Ten 10'.isalnum())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 29. Как удалить пробелы из начала строки (из её левой части), из её конца (из правой части), или с обеих сторон строки?
# Здесь нам пригодятся, соответственно, методы lstrip(), rstrip() и strip().
print('29. Как удалить пробелы из начала строки (из её левой части), из её конца (из правой части), или с обеих сторон строки?')
string = '  string of whitespace    '
print('Удалены пробелы с левой стороны в строке "  string of whitespace    ":', string.lstrip())
print('Удалены пробелы с правой стороны в строке "  string of whitespace    ":', string.rstrip())
print('Удалены пробелы с обеих сторон в строке "  string of whitespace    ":', string.strip())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 30. Как проверить то, что строка начинается с заданной последовательности символов,
# или заканчивается заданной последовательностью символов?
# Для ответа на этот вопрос можно прибегнуть, соответственно, к методам startswith() и endswith().
print('30. Как проверить то, что строка начинается с заданной последовательности символов, или заканчивается заданной последовательностью символов?')
city = 'New York'
print('Строка "New York" начинается с "New"? -', city.startswith('New'))
print('Строка "New York" заканчивается на "York"? -', city.endswith('York'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 31. Как закодировать строку в ASCII?
# Метод encode() позволяет кодировать строки с использованием заданной кодировки.
# По умолчанию используется кодировка utf-8. Если некий символ не может быть представлен с использованием заданной
# кодировки, будет выдана ошибка UnicodeEncodeError.
print('31. Как закодировать строку в ASCII?')
print('"Fresh Tuna" в ASCII:', 'Fresh Tuna'.encode('ascii'))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 32. Как узнать о том, что строка включает в себя только пробелы?
# Есть метод isspace(), который возвращает True только в том случае, если строка состоит исключительно из пробелов.
print('32. Как узнать о том, что строка включает в себя только пробелы?')
print('строка "            " состоит только из пробелов? - ','            '.isspace())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 33. Что случится, если умножить некую строку на 3?
# Будет создана новая строка, представляющая собой исходную строку, повторённую три раза.
print('33. Что случится, если умножить некую строку на 3?')
strstrstr = '123'
print('строка "123" умноженная на 3:' ,strstrstr*3)
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 34. Как привести к верхнему регистру первый символ каждого слова в строке?
# Существует метод title(), приводящий к верхнему регистру первую букву каждого слова в строке.
print('34. Как привести к верхнему регистру первый символ каждого слова в строке?')
print('Все слова в строке "олень иванович быстродрапов" должны быть с заглавной буквы:' ,'олень иванович быстродрапов'.title())
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 35. Как объединить две строки?
# Для объединения строк можно воспользоваться оператором +.
print('35. Как объединить две строки?')
print('Объединение трёх строк "string one", " " и "string two":', 'string one' + ' ' + 'string two' )
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 36. Как пользоваться методом partition()?
# Метод partition() разбивает строку по заданной подстроке.
# После этого результат возвращается в виде кортежа. При этом подстрока, по которой осуществлялась разбивка, тоже входит в кортеж.
print('36. Как пользоваться методом partition()?')
sentence = "If you want to be a ninja"
print('Строка "If you want to be a ninja" должна разбиться на кортеж по подстроке " want ":', sentence.partition(' want '))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 37. Строки в Python иммутабельны. Что это значит?
# То, что строки иммутабельны, говорит о том, что после того, как создан объект строки, он не может быть изменён.
# При «модификации» строк исходные строки не меняются. Вместо этого в памяти создаются совершенно новые объекты.
# Доказать это можно, воспользовавшись функцией id().
print('37. Строки в Python иммутабельны. Что это значит?')
proverb = 'Rise each day before the sun'
print('id переменной "proverb":', id(proverb))
proverb_two = 'Rise each day before the sun' + ' if its a weekday'
print('id переменной "proverb_two":', id(proverb_two))
# При конкатенации 'Rise each day before the sun' и ' if its a weekday' в памяти создаётся новый объект, имеющий новый идентификатор.
# Если бы исходный объект менялся бы, тогда у объектов был бы один и тот же идентификатор.
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 38. Если объявить одну и ту же строку дважды (записав её в 2 разные переменные) — сколько объектов будет создано в памяти? 1 или 2?
# В качестве примера подобной работы со строками можно привести такой фрагмент кода:
print('38. Если объявить одну и ту же строку дважды (записав её в 2 разные переменные) — сколько объектов будет создано в памяти? 1 или 2?')
animal = 'dog'
pet = 'dog'
# При таком подходе в памяти создаётся лишь один объект. Когда я столкнулся с этим в первый раз,
# мне это не показалось интуитивно понятным. Но этот механизм помогает Python экономить память при работе с длинными строками.
print(id(animal)==print(pet))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 39. Как пользоваться методами maketrans() и translate()?
# Метод maketrans() позволяет описать отображение одних символов на другие, возвращая таблицу преобразования.
# Метод translate() позволяет применить заданную таблицу для преобразования строки.
print('39. Как пользоваться методами maketrans() и translate()?')
# создаём отображение
mapping = str.maketrans("abcs", "123S")
# преобразуем строку
print('abc должно перевестись в 123, а окончание s в S:', "abc are the first three letters".translate(mapping))
# переводятся так a-1, b-2, c-3, s-S
# Так можно тексты шифровать и расшифровывать
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 40. Как убрать из строки гласные буквы?
# Один из ответов на этот вопрос заключается в том, что символы строки перебирают, пользуясь механизмом List Comprehension.
# Символы проверяют, сравнивая с кортежем, содержащим гласные буквы. Если символ не входит в кортеж — он присоединяется к новой строке.
print('40. Как убрать из строки гласные буквы?')
string = 'Hello 1 World 2'
vowels = ('a','e','i','o','u')
print('Вывод "Hello 1 World 2" без гласных:',''.join([c for c in string if c not in vowels]))
# ////////////////////////////////////////////
print()
# ////////////////////////////////////////////
# 41. В каких ситуациях пользуются методом rfind()?
# Метод rfind() похож на метод find(), но он, в отличие от find(), просматривает строку не слева направо,
# а справа налево, возвращая индекс первого найденного вхождения искомой подстроки.
print('41. В каких ситуациях пользуются методом rfind()?')
story = 'The price is right said Bob. The price is right.'
print('Нашёл первый "is" с конца:', story.rfind('is'))