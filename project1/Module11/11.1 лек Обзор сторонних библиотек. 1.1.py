# Модуль — это обычно один файл с расширением .py, то есть обычный Python-файл, содержащий различные классы, функции и
# другие элементы. Модуль предназначен для решения какой-то конкретной задачи. При его импорте мы получаем небольшой
# инструмент, который помогает решить уже существующую задачу или использовать ранее написанные функции.

# Пакет — это сборник модулей, объединённых для выполнения связанных задач. Это может быть несколько небольших
# Python-файлов или даже достаточно крупные модули. Пакеты в Python часто равнозначны библиотекам, поэтому, говоря
# "пакет" или "библиотека", мы подразумеваем одно и то же. Как у пакетов, так и у библиотек могут быть свои подпакеты,
# которые тоже содержат модули, создавая иерархическую архитектуру.

# Фреймворк — это то же самое, что и пакет библиотека. Есть маленькие фреймворки, есть большие фреймворки, состоящие из
# некоторых библиотек. Точно также и библиотека, может состоять из некоторых библиотек.
# Фреймворк — это более масштабное понятие. В некотором смысле, фреймворк можно сравнить с библиотекой или пакетом, но
# ключевое отличие фреймворка в том, что он диктует правила разработки. Есть маленькие и большие фреймворки, состоящие
# из нескольких библиотек. Разница между фреймворком и библиотекой в том, что фреймворк задает структуру проекта и
# правила, по которым программист должен работать. Например, фреймворк Django устанавливает строгие правила: сначала
# нужно создать основное приложение, активировать его и создавать подпроекты. Программист должен следовать установленной
# архитектуре.

# Фреймворк > библиотека > пакет

# Прежде чем перейти к установке, стоит рассмотреть процесс создания стороннего модуля. Допустим, мы разработчики и
# написали программу или даже пакет, который хотим выложить на платформы, где его смогут использовать другие.
# 1) Первым шагом разработчики пишут код, используя системы контроля версий, такие как Git.
# 2) Затем этот код загружается на серверы с поддержкой open-source проектов, например, на GitHub. GitHub содержит
# множество проектов на разных языках программирования, включая Python, и любой желающий может добавить их к себе в
# репозиторий или изменить.
# 3) Однако так как на GitHub очень много проектов и не всегда легко найти качественные пакеты, был создан сайт
# PyPi.org, где размещаются крупные проекты для Python. Оттуда их можно легко скачать с помощью pip.

# pip search "Ключевое слово" - найти все пакеты на PyPI с этим словом
# pip install "Имя пакета" - найти и установить последнюю версию пакета
# pip install "Имя пакета"==1.2.3 (версия) - найти и установить конкретную версию (1.2.3) пакета
# pip install --upgrade "Имя пакета" - обновить версию установленного пакета до последней
# pip install --upgrade "Имя пакета"==1.2.3 (версия) - обновить версию установленного пакета до указанного
# pip uninstall "Имя пакета" - удалить пакет
# pip freeze - выдать список установленных пакетов с версиями
# pip freeze > requirements.txt - создать txt файл, в котором указаны все пакеты с версиями
# pip install -r requirements.txt - установить все пакеты указанных версий из файла