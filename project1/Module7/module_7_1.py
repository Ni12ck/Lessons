# Задача "Учёт товаров":

# Необходимо реализовать 2 класса Product и Shop, с помощью которых будет производиться запись в файл с продуктами.
# Объекты класса Product будут создаваться следующим образом - Product('Potato', 50.0, 'Vagetables') и обладать
# следующими свойствами:
# 1. Атрибут name - название продукта (строка).
# 2. Атрибут weight - общий вес товара (дробное число) (5.4, 52.8 и т.п.).
# 3. Атрибут category - категория товара (строка).
# 4. Метод __str__, который возвращает строку в формате '<название>, <вес>, <категория>'. Все данные в строке разделены
# запятой с пробелами.

# Объекты класса Shop будут создаваться следующим образом - Shop() и обладать следующими свойствами:
# 1. Инкапсулированный атрибут __file_name = 'products.txt'.
# 2. Метод get_products(self), который считывает всю информацию из файла __file_name, закрывает его и возвращает единую
# строку со всеми товарами из файла __file_name.
# 3. Метод add(self, *products), который принимает неограниченное количество объектов класса Product. Добавляет в файл
# __file_name каждый продукт из products, если его ещё нет в файле (по названию). Если такой продукт уже есть, то не
# добавляет и выводит строку 'Продукт <название> уже есть в магазине'.


# Создал Product - класс описывающий продукты
class Product:
    # Атрибуты объекта класса
    def __init__(self, name: str, weight: float, category: str):
        self.name = name  # название продукта
        self.weight = weight  # общий вес товара
        self.category = category  # категория товара

    # Метод __str__, который возвращает строку в формате '<название>, <вес>, <категория>'
    def __str__(self):
        return f'{self.name}, {self.weight}, {self.category}'


# Создал класс Shop
class Shop:
    # Инкапсулированный атрибут
    __file_name = 'products.txt'

    # Метод get_products(self), который считывает всю информацию из файла __file_name, закрывает его и возвращает единую
    # строку со всеми товарами из файла __file_name
    def get_products(self):
        file = open(self.__file_name, 'r')
        file_read = file.read()
        file.close()
        return file_read

    # Метод add(self, *products), который принимает неограниченное количество объектов класса Product. Добавляет в файл
    # __file_name каждый продукт из products, если его ещё нет в файле (по названию). Если такой продукт уже есть, то не
    # добавляет и выводит строку 'Продукт <название> уже есть в магазине'.
    def add(self, *products):
        for product in products:
            if product.name not in self.get_products():
                file = open(self.__file_name, 'a')
                file.write(f'{product.__str__()}\n')
                file.close()
            else:
                print(f'Продукт {product.name} уже есть в магазине')


# Пример работы программы:
# Объект класса Shop
s1 = Shop()
# Объекты класса Product
p1 = Product('Potato', 50.5, 'Vegetables')
p2 = Product('Rice', 2.0, 'Groceries')
p3 = Product('Apple', 3.3, 'Fruits')
# Вывод объекта p2
print(f'Рис: {p2}')
print('Список товаров:')
# Добавление продуктов в список
s1.add(p1, p2, p3)
# Вывод списка продуктов
print(s1.get_products())
