print('Hello')  # Это кодировка ASCII, у каждого символа есть свой код - всего 128 символов
print(f'номер символа "N":{ord('N')}')  # ord преобразует символ в его код
print(f'номер символа "n":{ord('n')}')
word = 'Ni12ck'
print()

chars = []  # пустой список
for char in word:
    chars.append(ord(char))
print(chars)
print()

empty_word = ''  # пустая строка
for char in chars:  # преобразую список в слово
    empty_word += chr(char)  # chr преобразует символ в его код
print(empty_word)
print()

chars2 = []
for char in range(128):
    chars2.append(chr(char))
print(f'Список символов с кодами от 0 до 128: {chars2}')
print()

# Python же больше ориентируется на таблицу «Unicode», которая очень похожа на «ASCII», но содержит более 2 миллионов
# символов. То есть, если «ASCII» включает в себя всего лишь 128 (127) символов, то «Unicode» охватывает гораздо большее
# количество символов. Но принцип работы остаётся тем же: каждому символу соответствует определённое значение.
print(f'Например русская буква "А": {chr(1040)}')
print()

# Перевод в шестнадцатеричный формат
print(f'шестнадцатеричный формат для N: {hex(ord('N'))}')  # 0x4e
bN = b'\x4e'
print(f'Тип строки bN: {type(bN)}')  # <class 'bytes'>
print(f'Декодирование строки bN: {bN.decode()}')  # decode преобразует байты в символ

# Кодировка - соответствие определённого символа определённому числовому значению. Иногда при работе с файлами мы можем
# встретить набор непонятных символов. Если мы пытаемся считать информацию из файла и получаем нечитабельные значения,
# вероятнее всего, произошла ошибка или недопонимание в кодировке. Существует большое количество различных кодировок,
# но наиболее распространённым и общепринятым стандартом является «UTF-8». Он имеет ограничения на количество байт,
# занимаемое каждым символом. Однако это самый широко используемый формат.
