# Задача "Найдёт везде":
# Напишите класс WordsFinder, объекты которого создаются следующим образом:
# WordsFinder('file1.txt, file2.txt', 'file3.txt', ...).
# Объект этого класса должен принимать при создании неограниченного количество названий файлов и записывать их в атрибут
# file_names в виде списка или кортежа.

# Также объект класса WordsFinder должен обладать следующими методами:
# I
# get_all_words - подготовительный метод, который возвращает словарь следующего вида:
# {'file1.txt': ['word1', 'word2'], 'file2.txt': ['word3', 'word4'], 'file3.txt': ['word5', 'word6', 'word7']}
# Где:
# 1. 'file1.txt', 'file2.txt', ''file3.txt'' - названия файлов.
# 2. ['word1', 'word2'], ['word3', 'word4'], ['word5', 'word6', 'word7'] - слова содержащиеся в этом файле.

# Алгоритм получения словаря такого вида в методе get_all_words:
# 1. Создайте пустой словарь all_words.
# 2. Переберите названия файлов и открывайте каждый из них, используя оператор with.
# 3. Для каждого файла считывайте единые строки, переводя их в нижний регистр (метод lower()).
# 4. Избавьтесь от пунктуации [',', '.', '=', '!', '?', ';', ':', ' - '] в строке. (тире обособлено пробелами, это не
# дефис в слове).
# 5. Разбейте эту строку на элементы списка методом split(). (разбивается по умолчанию по пробелу)
# 6. В словарь all_words запишите полученные данные, ключ - название файла, значение - список из слов этого файла.

# II
# find(self, word) - метод, где word - искомое слово. Возвращает словарь, где ключ - название файла, значение - позиция
# первого такого слова в списке слов этого файла.

# III
# count(self, word) - метод, где word - искомое слово. Возвращает словарь, где ключ - название файла, значение -
# количество слова word в списке слов этого файла.

# В методах find и count пользуйтесь ранее написанным методом get_all_words для получения названия файла и списка его
# слов.
# Для удобного перебора одновременно ключа(названия) и значения(списка слов) можно воспользоваться методом словаря -
# item().

# Логика методов find или count
# for name, words in get_all_words().items():


# Создал класс WordsFinder, объекты которого принимают неограниченное количество названий файлов
class WordsFinder:
    def __init__(self, *file_names):
        self.file_names = file_names

    # get_all_words - подготовительный метод, который возвращает словарь следующего вида:
    # {'file1.txt': ['word1', 'word2'], 'file2.txt': ['word3', 'word4'], 'file3.txt': ['word5', 'word6', 'word7']}
    # Где:
    # 1. 'file1.txt', 'file2.txt', ''file3.txt'' - названия файлов.
    # 2. ['word1', 'word2'], ['word3', 'word4'], ['word5', 'word6', 'word7'] - слова содержащиеся в этом файле.
    def get_all_words(self):
        # Создал пустой словарь all_words
        all_words = {}
        # Перебираю названия файлов и открываю каждый из них, используя оператор with
        for name in self.file_names:
            with open(name, 'r', encoding='utf-8') as file:
                # Переменная, которая является строкой, в неё буду записывать слова из файла
                words = ''
                # Для каждого файла считываю строки
                for line in file:
                    # Список символов, которые нужно будет заменить
                    signs = [',', '.', '=', '!', '?', ';', ':', ' - ']
                    for sign in signs:
                        # Перевожу строки в нижний регистр и убираю из них символы, входящие в список signs
                        line = line.replace(sign, '').lower()
                    # Добавляю строки в words
                    words = words + line
                # Присваиваю названию файла список из разделённый слов строки words
                all_words[name] = list(words.split())
        # Возвращаю словарь all_words
        return all_words

    # find(self, word) - метод, где word - искомое слово. Возвращает словарь, где ключ - название файла, значение -
    # позиция первого такого слова в списке слов этого файла
    def find(self, word):
        # Создал пустой словарь find, в который будет записываться результат выполнения метода
        find = {}
        for name, words in self.get_all_words().items():
            if word.lower() in words:
                find.update({name: words.index(word.lower())})
        return find

    # count(self, word) - метод, где word - искомое слово. Возвращает словарь, где ключ - название файла, значение -
    # количество слова word в списке слов этого файла.
    def count(self, word):
        # Создал пустой словарь count, в который будет записываться результат выполнения метода
        count = {}
        for name, words in self.get_all_words().items():
            # Счётчик
            counts = 0
            for counted_word in words:
                if word.lower() == counted_word:
                    counts += 1
                count.update({name: counts})
            return count


# Пример выполнения программы:
finder1 = WordsFinder('Sample71.txt', 'Sample71-2.txt')
# Содержание файлов:
# Файл'Sample71.txt':
# Sample 1
# Sample 2
# Sample 3
# Sample 4
# Sample 5
# Файл'Sample71-2.txt':
# Привет, я новый текст
# Вторая строка нового текста
# Третья строка с символами: =, !, ?, ;, :, де - фис.
# Вывод словаря
print(finder1.get_all_words())
# Получившийся словарь:
# {'Sample71.txt': ['sample', '1', 'sample', '2', 'sample', '3', 'sample', '4', 'sample', '5'], 'Sample71-2.txt':
# ['привет', 'я', 'новый', 'текст', 'вторая', 'строка', 'нового', 'текста', 'третья', 'строка', 'с', 'символами',
# 'дефис']}
print()

# Поиск слов
print(f'Словари с названием файла и индексом первого найденного слова: {finder1.find('SaMPLe')}, '
      f'{finder1.find('Строка')}')
# Получившиеся словари:
# {'Sample71.txt': 0}, {'Sample71-2.txt': 5}
print()

# Подсчёт слов
print(f'Количество слов "Sample" и "Строка": {finder1.count('SaMPLe')}, {finder1.count('стрОкА')}')
# Получившиеся словари:
# {'Sample71.txt': 5}, {'Sample71.txt': 0}
