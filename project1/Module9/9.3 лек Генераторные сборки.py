# Ленивые вычисления-это те вычисления, которые выполняются только тогда, когда они нам необходимы

# Особенности генераторных сборок:
# 1. они выдают результат только тогда, когда надо, то есть вычисляются при необходимости;
# 2. могут выполниться только один раз. Генераторы могут выполниться только один раз, то есть могут провести свои
# вычисления только один раз;
# 3. они занимают мало места в памяти. Так как они вычисляют только тогда, когда нам необходимо и при этом забывают
# прошлый вычисленный результат, то они в памяти хранят очень мало места. При этом ещё и выполняется гораздо эффективное
# вычисление. Все это рассмотрим на примерах.

# Первый пример
# Прочитать генераторную сборку можно только один раз
print('Первый пример:')

my_numbers = [3, 1, 4, 1, 5, 9, 2, 6]

result_1 = (x ** 100 for x in my_numbers)
print(f'Андрес объекта {result_1} в памяти')
print()

for elem in result_1:
    print(elem)

print()

print('Ещё раз')
for elem in result_1:
    print(elem)

print('Генераторные сборки могут выполниться только один раз.')
print()

# Второй пример
# Используются там, где надо производить затратные вычисления
print('Второй пример:')

import time

start_time = time.time()

result_2 = (x ** 3000 for x in my_numbers)  # my_numbers = [3, 1, 4, 1, 5, 9, 2, 6]
print(result_2)

for i in result_2:
    print(i)

finish_time = time.time()
print(f'Время в миллисекундах {(finish_time - start_time) * 1000}')
print()

# Ленивые вычисления есть во встроенных функциях, таких как «range», «zip», «open», «map». Все эти функции, которые
# мы с вами до этого прошли, это функции, которые используют ленивые вычисления. Почему? Потому что если мы просто
# напечатаем результат этой функции, просто, например, сохраним их в переменную и напечатаем, у нас ничего не
# произойдёт, потому что вычисления не производились. Они будут производиться только тогда, когда они действительно нам
# будут нужны.

# Третий пример
# Демонстрация встроенных функций с ленивыми вычислениями
print('Третий пример:')

list_1 = [1, 5, 9, 29, 4]
list_2 = [5, 2, 9, 1, 2]

ran = range(10, 30)
zp = zip(list_1, list_2)
mp = map(str, list_1)

print(ran, zp, mp)

print(list(ran))
print(list(zp))
print(list(mp))