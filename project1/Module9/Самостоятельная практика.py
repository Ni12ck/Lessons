# Генератор декоратора
def gen_dec_mul(number):
    print(f'Этапы выполнения:\n1. Получили число {number}, на которое нужно умножить\n2. Начинаем создавать декоратор')

    # Декоратор, который будет умножать на какое-то число из генератора на результат функции
    def dec_mul(func):
        print(f'4. Декоратор принял на вход функцию {func.__name__}, которую надо будет декорировать\n'
              f'5. Начинает создавать функцию wrapper_mul (обёртку), которая и будет выполнять умножение на {number}')

        # Тут в аргументах принимаем вообще всё, что можно: числа строки и т.д.
        def wrapper_mul(*args, **kwargs):
            print(f'7. Запускаем функцию {func.__name__} с переданными в обёртку параметрами и запоминаем результат')
            res_func = func(*args, **kwargs)
            print(f'8. Получаем результат функции {func.__name__} обёрнутой декоратором dec_mul: {res_func}')
            res_wrapper_mul = number * res_func
            print(f'9. Возвращаем результат "{res_wrapper_mul}" функции wrapper_mul, '
                  f'полученный путём умножения введённого аргумента генератора "{number}" '
                  f'на результат "{res_func}" функции {func.__name__}')
            return f'\nИтоговый результат после выполнения всех действий: {res_wrapper_mul}\n'

        print('6. Декоратор создал функцию wrapper_mul (обёртку) и возвращает её')
        return wrapper_mul

    print('3. Декоратор создан и возвращён')
    return dec_mul


# Функции для примеров работы:
print('Результат первого примера - декорирована функция sum_two_numbers(1, 2) с множителем 5:')


# @gen_dec_mul(5) - дальше буду использовать @, так как это короче)
# Функция складывает 2 числа
def sum_two_numbers(a, b):
    return a + b


# Работа с генератором через присвоение переменной mul_by_5 генератора gen_dec_mul со значением 5
mul_by_5 = gen_dec_mul(5)
# Работа с декоратором через присвоение переменной sum_two_numbers генератора mul_by_5 с результатом функции
# sum_two_numbers
sum_two_numbers = mul_by_5(sum_two_numbers)
# Присвоение переменной result_1 результата функции sum_two_numbers(1, 2), обёрнутой в декоратор
result_1 = sum_two_numbers(1, 2)
# Вывод result_1
print(result_1)

print('Результат второго примера - декорирована функция print_word("Привет! ") с множителем 3:')


@gen_dec_mul(3)
# Функция возвращает слово
def print_word(word: str):
    return word


# Присвоение переменной result_2 результата функции print_word("Привет! "), обёрнутой в декоратор
result_2 = print_word("Привет! ")
print(result_2)

print("Результат третьего примера - декорирована функция list_of_numbers(1, 'a', {'d': 4}) с множителем 2:")


@gen_dec_mul(2)
# Функция, которая возвращает список введённых аргументов
def list_of_numbers(*args):
    list_num = [args]
    return list_num


# Присвоение переменной result_3 результата функции list_of_numbers(1, 'a', {'d': 4}), обёрнутой в декоратор
result_3 = list_of_numbers(1, 'a', {'d': 4})
print(result_3)
