# Задание "Раз, два, три, четыре, пять .... Это не всё?":
# Наши студенты, без исключения - очень умные ребята. Настолько умные, что иногда по утру сами путаются в том, что
# намудрили вчера вечером.
# Один из таких учеников уснул на клавиатуре в процессе упорной учёбы (ещё и трудолюбивые). Тем не менее, даже после
# сна, его код остался рабочим и выглядел следующим образом:

# data_structure = [
#   [1, 2, 3],
#   {'a': 4, 'b': 5},
#   (6, {'cube': 7, 'drum': 8}),
#   "Hello",
#   ((), [{(2, 'Urban', ('Urban2', 35))}])
# ]

# Увидев это студент задался вопросом: "А есть ли универсальное решение для подсчёта суммы всех чисел и длин всех строк?"
# Да, выглядит страшно, да и обращаться нужно к каждой внутренней структуре (списку, словарю и т.д.) по-разному.

# Ученику пришлось каждый раз использовать индексацию и обращение по ключам - универсального решения для таких структур
# он не нашёл.

# Помогите сокурснику осуществить его задумку.

# Что должно быть подсчитано:
# 1. Все числа (не важно, являются они ключами или значениям или ещё чем-то).
# 2. Все строки (не важно, являются они ключами или значениям или ещё чем-то)

# Для примера, указанного выше, расчёт вёлся следующим образом:
# 1 + 2 + 3 + len('a') + 4 + len('b') + 5 + 6 + len('cube') + 7 + .... + 35 = 99

# Входные данные (применение функции):

# data_structure = [
# [1, 2, 3],
# {'a': 4, 'b': 5},
# (6, {'cube': 7, 'drum': 8}),
# "Hello",
# ((), [{(2, 'Urban', ('Urban2', 35))}])
# ]

# result = calculate_structure_sum(data_structure)
# print(result)

# Выходные данные (консоль):
# 99

# Примечания (рекомендации):
# Весь подсчёт должен выполняться одним вызовом функции.
# Рекомендуется применить рекурсивный вызов функции, для каждой внутренней структуры.
# Т.к. каждая структура может содержать в себе ещё несколько элементов, можно использовать параметр *args
# Для определения типа данного используйте функцию isinstance.


# Использую входные данные. Дан список data_structure:
data_structure = [
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]


# Создам функцию для подсчёта суммы всех чисел и длин строк, по умолчанию она называется calculate_structure_sum
def calculate_structure_sum(*args):
    # Создам переменную sum, в которую будут записываться суммы
    sum = 0
    # Создам цикл перебора элементов в списке
    for i in args:
        # Если тип элемента int, то прибавляю его к сумме
        if isinstance(i, int):
            sum += i
        # Если тип элемента str, то прибавляю к сумме длину строки
        elif isinstance(i, str):
            sum += len(i)
        # Если тип элемента list, tuple или set, то распаковываю эти списки, кортежи и множества, и прибавляю к сумме
        elif isinstance(i, (list, tuple, set)):
            sum += calculate_structure_sum(*i)
        # Если тип элемента dict (словарь), то распаковываю ключи, их значения, и прибавляю к сумме
        elif isinstance(i, dict):
            sum += calculate_structure_sum(*i.keys())
            sum += calculate_structure_sum(*i.values())

    # Возвращаю сумму
    return sum


print(f'Сумма всех чисел и длин строк: {calculate_structure_sum(*data_structure)}')


# Второй вариант функции
def calculate_structure_sum2(item):
    sum = 0
    if isinstance(item, int):  # Если элемент - целое число
        sum += item
    elif isinstance(item, str):  # Если элемент - строка
        sum += len(item)
    elif isinstance(item, (list, tuple, set)):  # Если элемент - список, кортеж или множество
        for sub_item in item:
            sum += calculate_structure_sum2(sub_item)
    elif isinstance(item, dict):  # Если элемент - словарь
        for key, value in item.items():
            sum += calculate_structure_sum2(key)
            sum += calculate_structure_sum2(value)
    return sum


print(f'Сумма всех чисел и длин строк (второй вариант): {calculate_structure_sum(*data_structure)}')
