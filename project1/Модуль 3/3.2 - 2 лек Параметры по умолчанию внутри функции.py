# Если задавать значение аргумента в функции, то для всех аргументов, либо для последних
# Нельзя записать def func_with_params(a = 1, b , c): или def func_with_params(a = 2 , b , c = 3):
# Но это всё не мешает переопределять значения аргументов
def func_with_params(a, b, c = 3):
    print(a + b + c)

func_with_params(2, 3)

def func_list (a, b=[]):
    b.append(a)
    print('Список будет обновляться после каждого вызова:', b)

func_list(1)
func_list('значение 2')
func_list(3)
func_list(4.1)

print()

def func_list2 (a, b = None):
    if b is None:
        b = []
        b.append(a)
    print('Одно значение в списке:', b)

func_list2(1)
func_list2('значение 2')
func_list2(3)
print()
print('Тут заданы 2 аргумента')
func_list2(1, 2)
print()
func_list2(4.1)

# У нас функция имеет возможность принимать параметры по умолчанию, что позволяет нам в момент вызова не передавать
# никаких аргументов. Но, если мы работаем с параметрами по умолчанию, мы их задаём либо конечным элементам, либо уж
# всем, которые присутствуют у нас в функции. И в качестве этих самых значений по умолчанию мы используем неизменяемые
# объекты.