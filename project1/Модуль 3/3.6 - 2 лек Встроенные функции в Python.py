# Разберём функцию any(), функцию аll() и поговорим про интроспекцию.
# Начнём с функций any() и аll(). Предположим, что есть список элементов.
exampl_any = [True, False, False]
# При условии, что хотя бы один из элементов внутри объекта будет True, функция any вернёт нам True, в противном случае
# вернёт False. Передадим в функцию any() наш объект ‘а’ (наш список) и получим ответ True. Если в объекте вместо
# True написать False, то и в ответ получим False.
print('Функция any:', any(exampl_any))

# Любые числа, кроме 0, будут давать True
exampl_value_any = [1, 2, 0]
print('Функция any с числами:', any(exampl_value_any))

# Если все нули, то получим False
exampl_value_0_any = [0, 0, 0]
print('Функция any с 0:', any(exampl_value_0_any))

# Подобное и со строками, если строка пустая, то получим False. А если есть хоть 1 символ, то получим True
exampl_str_empty = ''
print('Функция any с пустой строкой:', any(exampl_str_empty))
exampl_str = '0'
print('Функция any со строкой:', any(exampl_str))

print()

# Есть функция all, которая учитывает значения сразу всех элементов. Работает ка строгий and.
print('Функция all:', all(exampl_any))
print('Функция all с числами:', all(exampl_value_any))

print()

# Интроспекция — это способность какого-либо объекта получить информацию об атрибутах и методах в процесс
# выполнения программы. К функциям интроспекции относятся такие функции, как dir().
# Эта функция позволяет получить информацию об атрибутах объекта. Передадим туда “а” и получим отсортированный в
# алфавитном порядке список целой кучи атрибутов. С двойным подчёркиванием нас сейчас особо не интересуют.
# Пролистав до конца этого списка, увидим уже вполне знакомые для себя методы. Например, append() добавляет элемент в
# конец списка, remove() убирает элемент из списка. Это уже вам более знакомо. Если также посмотрим для строки, то
# получим точно такую же информацию и доступные методы.
print('Функция dir показывает атрибуты объекта (в данном случае список):', dir(exampl_any))

# Функция isinstance сравнивает класс объекта с введённым
print('Функция isinstance сравнивает класс объекта с введённым (в данном случае список со списком):',
      isinstance(exampl_any, list))
print('Функция isinstance сравнивает класс объекта с введённым (в данном случае список с числом):',
      isinstance(exampl_any, int))

# Либо можно подобное сделать с помощью сравнения
print('Сравнивает класса объекта с введённым (в данном случае список со списком):', type(exampl_any) == list)

print()

# Можно сравнивать являются ли объекты одинаковыми или являются одним и тем же объектом
a = [1]
b = [0, 1]
# Изменения списка c будут касаться изменений списка b и наоборот
c = b
d = [1]
print('a это d? -', a is d)
print('a равно d? -', a == d)
print('c это b? -', c is b)
print('a равно b? -', a == b)

# Можно проверить являются два объекта одним и тем же объектом с помощью id
print('id a:', id(a))
print('id b:', id(b))
print('id c:', id(c))
print('id d:', id(d))

print()

# Есть функция help, которая помогает с работой с объектом или функцией
# print(help(a))
print(help(print))

print()


def helper():
    # Документация, которую можно ввести для своих функций
    """
    Эта функция-помощник
    """
    pass


print(help(helper))
# Второй способ вывода документации
print(helper.__doc__)
