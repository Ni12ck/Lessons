# *args, **kwargs. * используется для запаковки и распаковки позиционных параметров, которые содержат один элемент: списки
# кортежи, множества и так далее. ** используются запаковки и распаковки именованных параметров - это словари.

# Например, мы не знаем сколько будет параметров, поэтому пишем *args (вместо args может быть любое другое слово,
# главное написать название, которое будет удобно). Все параметры будут упакованы в кортеж.
def print_params(*params):
    print('Упакованные параметры:', params) # Параметры упакованы в кортеж
    print()
    print('Распакованные параметры:', *params) # Параметры распакованы

# Обычно *args используется, когда аргументов больше 7

print_params(1, 2 , 3 ,4 ,6.2)

# * может использоваться для распаковки
def print_params2(a, b, c):
    print(a, b, c)

print()
# Можно присвоить значения из списка аргументам из функции
list_1 = [1, 2, 3]

print('Распаковка списка')
print_params2(*list_1)

print()
# Можно присвоить одному аргументу значение целого списка
print('Один аргумент является списком')
print_params2(list_1, 2, 1)

print()
# Также подобное можно сделать со словарём, но название ключей должны совпадать с названиями аргументов в функции
dict_1 = {'b': 1, 'c': 2, 'a': 3}

print('Распаковка словаря')
print_params2(**dict_1)

print()
# Работа со словарём
def print_params3(**params):
    print('Вывод ключей словаря')
    for i in params:
        print(i)
    print()
    print('Вывод ключа со значением, используя метод items')
    for key, value in params.items():
        print(key, value)
    print()
    print('Работа со словарём:', params) # Параметры упакованы в кортеж

print_params3(**dict_1)

print()
# Распаковка списка и словаря одновременно, нужно следить за количеством аргументов для правильного вывода
list_2 = [12, 23]
dict_2 = {'c': 34}
# Вывод второй функции, в которой есть позиционные элементы a, b, c с распаковкой списка и словаря
print('Вывод второй функции, в которой есть позиционные элементы a, b, c')
print_params2(*list_2, **dict_2)